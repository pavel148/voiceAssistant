document.addEventListener('DOMContentLoaded', () => {
    const wakeWord    = '–ø—Ä–∏–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç';
    const userInputEl = document.getElementById('userInput');
    const botReplyEl  = document.getElementById('botReply');
    const recordBtn   = document.getElementById('start-record');
    const playBtn     = document.getElementById('audio-play');
    const stopSpeech  = document.getElementById('stop-speech');

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
        console.warn('[Speech API] not supported');
        return;
    }

    const recognizer = new SpeechRecognition();
    recognizer.lang           = 'ru-RU';
    recognizer.interimResults = true;    // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    recognizer.continuous     = true;    // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ onresult –ø–æ–¥—Ä—è–¥

    // –ü—Ä–∏ –ª—é–±–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ ‚Äî –ø–∏—à–µ–º –≤ textarea (live-update)
    recognizer.onresult = event => {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (interim + final)
        let transcript = '';
        for (let i = 0; i < event.results.length; i++) {
            transcript += event.results[i][0].transcript;
        }
        userInputEl.value = transcript.trim();
        console.log('[Recognizer] interim/final:', transcript);
    };

    recognizer.onerror = evt => {
        console.error('[Recognizer] error:', evt.error);
    };

    recognizer.onend = () => {
        console.log('[Recognizer] stopped listening');
        // –ü—Ä–∏–∑–Ω–∞–∫, —á—Ç–æ –¥–∞–ª—å—à–µ –º—ã –≤—ã–∑–æ–≤–µ–º sendChatRequest –≤—Ä—É—á–Ω—É—é
    };

    // –°—Ç–∞—Ä—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    recordBtn.addEventListener('mousedown', () => {
        console.log('[Recognizer] start listening');
        try {
            recognizer.start();
        } catch (e) {
            console.warn('Cannot start recognition:', e);
        }
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∏–ª–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∏
    const stopRecognition = () => {
        if (recognizer) {
            console.log('[Recognizer] stop listening');
            recognizer.stop();
            // –ü–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ —à–ª—ë–º –∑–∞–ø—Ä–æ—Å
            const fullText = userInputEl.value.trim().toLowerCase();
            if (fullText.startsWith(wakeWord)) {
                const query = fullText.replace(wakeWord, '').trim();
                if (query) {
                    sendChatRequest(query);
                }
            }
        }
    };
    recordBtn.addEventListener('mouseup',   stopRecognition);
    recordBtn.addEventListener('mouseleave', stopRecognition);

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–∑–≤—É—á–∫–∏ –æ—Ç–≤–µ—Ç–∞
    function sendChatRequest(text) {
        console.log('[API] request:', text);
        fetch('/api/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify([
                { role: 'system', content: 'You are a helpful assistant.' },
                { role: 'user',   content: text }
            ])
        })
            .then(res => res.json())
            .then(data => {
                const reply = data.choices?.[0]?.message?.content || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞';
                botReplyEl.innerText = reply;
                speakText(reply);
            })
            .catch(err => {
                console.error('[API] error:', err);
                botReplyEl.innerText = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞';
            });
    }

    function speakText(text) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã tts –Ω–µ –º–µ—à–∞–ª–æ
        recognizer.stop();
        const utt = new SpeechSynthesisUtterance(text);
        utt.lang = 'ru-RU';
        utt.onend = () => {
            console.log('[TTS] done');
        };
        speechSynthesis.speak(utt);
    }

    playBtn.addEventListener('click', () => {
        const text = botReplyEl.innerText.trim();
        if (text) speakText(text);
    });

    // –ö–Ω–æ–ø–∫–∞ ¬´üîá –ó–∞–º–æ–ª—á–∞—Ç—å¬ª ‚Äî –æ—Ç–º–µ–Ω—è–µ—Ç –≤—Å—é —Ç–µ–∫—É—â—É—é –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ—á—å
    stopSpeech.addEventListener('click', () => {
        console.log('[TTS] cancel');
        speechSynthesis.cancel();
    });
});
